// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: routing-processor.proto

// Package for routing processor functionality including semantic caching and model selection

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoutingProcessor_ExternalProcess_FullMethodName = "/routing_processor.v1alpha1.RoutingProcessor/ExternalProcess"
	RoutingProcessor_GetCapabilities_FullMethodName = "/routing_processor.v1alpha1.RoutingProcessor/GetCapabilities"
)

// RoutingProcessorClient is the client API for RoutingProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingProcessorClient interface {
	ExternalProcess(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProcessingRequest, ProcessingResponse], error)
	GetCapabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error)
}

type routingProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingProcessorClient(cc grpc.ClientConnInterface) RoutingProcessorClient {
	return &routingProcessorClient{cc}
}

func (c *routingProcessorClient) ExternalProcess(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProcessingRequest, ProcessingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RoutingProcessor_ServiceDesc.Streams[0], RoutingProcessor_ExternalProcess_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProcessingRequest, ProcessingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoutingProcessor_ExternalProcessClient = grpc.BidiStreamingClient[ProcessingRequest, ProcessingResponse]

func (c *routingProcessorClient) GetCapabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CapabilitiesResponse)
	err := c.cc.Invoke(ctx, RoutingProcessor_GetCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingProcessorServer is the server API for RoutingProcessor service.
// All implementations must embed UnimplementedRoutingProcessorServer
// for forward compatibility.
type RoutingProcessorServer interface {
	ExternalProcess(grpc.BidiStreamingServer[ProcessingRequest, ProcessingResponse]) error
	GetCapabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error)
	mustEmbedUnimplementedRoutingProcessorServer()
}

// UnimplementedRoutingProcessorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoutingProcessorServer struct{}

func (UnimplementedRoutingProcessorServer) ExternalProcess(grpc.BidiStreamingServer[ProcessingRequest, ProcessingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExternalProcess not implemented")
}
func (UnimplementedRoutingProcessorServer) GetCapabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedRoutingProcessorServer) mustEmbedUnimplementedRoutingProcessorServer() {}
func (UnimplementedRoutingProcessorServer) testEmbeddedByValue()                          {}

// UnsafeRoutingProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingProcessorServer will
// result in compilation errors.
type UnsafeRoutingProcessorServer interface {
	mustEmbedUnimplementedRoutingProcessorServer()
}

func RegisterRoutingProcessorServer(s grpc.ServiceRegistrar, srv RoutingProcessorServer) {
	// If the following call pancis, it indicates UnimplementedRoutingProcessorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoutingProcessor_ServiceDesc, srv)
}

func _RoutingProcessor_ExternalProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoutingProcessorServer).ExternalProcess(&grpc.GenericServerStream[ProcessingRequest, ProcessingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoutingProcessor_ExternalProcessServer = grpc.BidiStreamingServer[ProcessingRequest, ProcessingResponse]

func _RoutingProcessor_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingProcessorServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingProcessor_GetCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingProcessorServer).GetCapabilities(ctx, req.(*CapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingProcessor_ServiceDesc is the grpc.ServiceDesc for RoutingProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routing_processor.v1alpha1.RoutingProcessor",
	HandlerType: (*RoutingProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapabilities",
			Handler:    _RoutingProcessor_GetCapabilities_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExternalProcess",
			Handler:       _RoutingProcessor_ExternalProcess_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "routing-processor.proto",
}

const (
	SemanticCacheService_SearchCache_FullMethodName = "/routing_processor.v1alpha1.SemanticCacheService/SearchCache"
	SemanticCacheService_StoreChat_FullMethodName   = "/routing_processor.v1alpha1.SemanticCacheService/StoreChat"
)

// SemanticCacheServiceClient is the client API for SemanticCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SemanticCacheServiceClient interface {
	SearchCache(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	StoreChat(ctx context.Context, in *StoreChatRequest, opts ...grpc.CallOption) (*StoreChatResponse, error)
}

type semanticCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSemanticCacheServiceClient(cc grpc.ClientConnInterface) SemanticCacheServiceClient {
	return &semanticCacheServiceClient{cc}
}

func (c *semanticCacheServiceClient) SearchCache(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, SemanticCacheService_SearchCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semanticCacheServiceClient) StoreChat(ctx context.Context, in *StoreChatRequest, opts ...grpc.CallOption) (*StoreChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreChatResponse)
	err := c.cc.Invoke(ctx, SemanticCacheService_StoreChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SemanticCacheServiceServer is the server API for SemanticCacheService service.
// All implementations must embed UnimplementedSemanticCacheServiceServer
// for forward compatibility.
type SemanticCacheServiceServer interface {
	SearchCache(context.Context, *SearchRequest) (*SearchResponse, error)
	StoreChat(context.Context, *StoreChatRequest) (*StoreChatResponse, error)
	mustEmbedUnimplementedSemanticCacheServiceServer()
}

// UnimplementedSemanticCacheServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSemanticCacheServiceServer struct{}

func (UnimplementedSemanticCacheServiceServer) SearchCache(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCache not implemented")
}
func (UnimplementedSemanticCacheServiceServer) StoreChat(context.Context, *StoreChatRequest) (*StoreChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreChat not implemented")
}
func (UnimplementedSemanticCacheServiceServer) mustEmbedUnimplementedSemanticCacheServiceServer() {}
func (UnimplementedSemanticCacheServiceServer) testEmbeddedByValue()                              {}

// UnsafeSemanticCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SemanticCacheServiceServer will
// result in compilation errors.
type UnsafeSemanticCacheServiceServer interface {
	mustEmbedUnimplementedSemanticCacheServiceServer()
}

func RegisterSemanticCacheServiceServer(s grpc.ServiceRegistrar, srv SemanticCacheServiceServer) {
	// If the following call pancis, it indicates UnimplementedSemanticCacheServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SemanticCacheService_ServiceDesc, srv)
}

func _SemanticCacheService_SearchCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemanticCacheServiceServer).SearchCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemanticCacheService_SearchCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemanticCacheServiceServer).SearchCache(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemanticCacheService_StoreChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemanticCacheServiceServer).StoreChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemanticCacheService_StoreChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemanticCacheServiceServer).StoreChat(ctx, req.(*StoreChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SemanticCacheService_ServiceDesc is the grpc.ServiceDesc for SemanticCacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SemanticCacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routing_processor.v1alpha1.SemanticCacheService",
	HandlerType: (*SemanticCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchCache",
			Handler:    _SemanticCacheService_SearchCache_Handler,
		},
		{
			MethodName: "StoreChat",
			Handler:    _SemanticCacheService_StoreChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routing-processor.proto",
}
